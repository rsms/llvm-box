#!/bin/bash
set -e
source "$(dirname "$0")/config.sh"
source "$(dirname "$0")/config-target-env.sh"

# useful documentation
#   https://llvm.org/docs/HowToCrossCompileLLVM.html#hacks
#   https://libcxx.llvm.org/BuildingLibcxx.html

EXTRA_CMAKE_ARGS=()  # extra args added to cmake invocation (depending on target)

CMAKE_C_COMPILER="$TARGET_CC"
CMAKE_CXX_COMPILER="$TARGET_CXX"
CMAKE_ASM_COMPILER="$TARGET_ASM"

CMAKE_C_FLAGS=()
CMAKE_CXX_FLAGS=()
CMAKE_STATIC_LINKER_FLAGS=() # passed to ar, not ld
CMAKE_EXE_LINKER_FLAGS=()
CMAKE_SHARED_LINKER_FLAGS=()
COMMON_LDFLAGS=() # extra for CMAKE_{EXE,SHARED}_LINKER_FLAGS

# zlib
CMAKE_C_FLAGS+=( -I"$ZLIB_DIST/include" )
CMAKE_CXX_FLAGS+=( -I"$ZLIB_DIST/include" )
COMMON_LDFLAGS+=( -L"$ZLIB_DIST/lib" )
EXTRA_CMAKE_ARGS+=( # note: LLVM_ENABLE_ZLIB must be "1", not "ON"
  -DLLVM_ENABLE_ZLIB=1 \
  -DZLIB_LIBRARY="$ZLIB_DIST/lib/libz.a" \
  -DZLIB_INCLUDE_DIR="$ZLIB_DIST/include" \
)

case "$TARGET_SYS" in
  darwin|apple|macos|ios)
    CMAKE_C_FLAGS+=(
      -isystem "$MACOS_SDK/usr/include" \
      -DTARGET_OS_EMBEDDED=0 \
      -DTARGET_OS_IPHONE=0 \
      -mmacosx-version-min=10.10 \
    )
    COMMON_LDFLAGS+=(
      -mmacosx-version-min=10.10 \
    )
    CMAKE_C_COMPILER="$CMAKE_C_COMPILER;-I$MACOS_SDK/usr/include"
    EXTRA_CMAKE_ARGS+=(
      -DCMAKE_OSX_DEPLOYMENT_TARGET=10.10 \
      -DCMAKE_SYSROOT=$MACOS_SDK \
      -DCMAKE_OSX_SYSROOT=$MACOS_SDK \
      -DDEFAULT_SYSROOT=$MACOS_SDK \
      -DRUNTIMES_BUILD_ALLOW_DARWIN=ON \
      -DLLVM_BUILTIN_TARGETS=default \
      -DLLVM_RUNTIME_TARGETS=default \
      -DRUNTIMES_CMAKE_ARGS="-DCMAKE_OSX_DEPLOYMENT_TARGET=10.10;-DCMAKE_OSX_ARCHITECTURES=arm64|x86_64" \
      -DLIBUNWIND_COMPILE_FLAGS="-isystem;$MACOS_SDK/usr/include" \
    )
    # LIBUNWIND_C_FLAGS
    # LIBUNWIND_CXX_FLAGS
    # LIBUNWIND_COMPILE_FLAGS
    # LIBUNWIND_LINK_FLAGS
    ;;
  linux)
    CMAKE_C_FLAGS+=( -fPIC )
    CMAKE_CXX_FLAGS+=( -fPIC )
    EXTRA_CMAKE_ARGS+=( \
      -DLIBCXX_HAS_GCC_S_LIB=OFF \
      -DLLVM_RUNTIME_TARGETS="$TARGET" \
    )
    ;;
esac


CMAKE_C_FLAGS="${CMAKE_C_FLAGS[@]}"
CMAKE_CXX_FLAGS="${CMAKE_C_FLAGS[@]} ${CMAKE_CXX_FLAGS[@]}"
CMAKE_STATIC_LINKER_FLAGS="${CMAKE_STATIC_LINKER_FLAGS[@]}" # ar, not ld
CMAKE_EXE_LINKER_FLAGS="${COMMON_LDFLAGS[@]} ${CMAKE_EXE_LINKER_FLAGS[@]}"
CMAKE_SHARED_LINKER_FLAGS="${COMMON_LDFLAGS[@]} ${CMAKE_SHARED_LINKER_FLAGS[@]}"


mkdir -p "$BUILD_DIR/llvm-runtimes-build"
_pushd "$BUILD_DIR/llvm-runtimes-build"

LLVM_RUNTIMES_DESTDIR=$BUILD_DIR/llvm-runtimes

cmake -G Ninja -Wno-dev "$LLVM_SRC/llvm" \
  -DCMAKE_BUILD_TYPE=MinSizeRel \
  -DCMAKE_SYSTEM_NAME="$TARGET_CMAKE_SYSTEM_NAME" \
  -DCMAKE_INSTALL_PREFIX="$LLVM_RUNTIMES_DESTDIR" \
  -DCMAKE_PREFIX_PATH="$LLVM_RUNTIMES_DESTDIR" \
  \
  -DCMAKE_C_COMPILER="$CMAKE_C_COMPILER" \
  -DCMAKE_CXX_COMPILER="$CMAKE_CXX_COMPILER" \
  -DCMAKE_ASM_COMPILER="$CMAKE_ASM_COMPILER" \
  -DCMAKE_AR="$TARGET_AR" \
  -DCMAKE_RANLIB="$TARGET_RANLIB" \
  \
  -DCMAKE_C_FLAGS="$CMAKE_C_FLAGS" \
  -DCMAKE_CXX_FLAGS="$CMAKE_CXX_FLAGS" \
  -DCMAKE_STATIC_LINKER_FLAGS="$CMAKE_STATIC_LINKER_FLAGS" \
  -DCMAKE_EXE_LINKER_FLAGS="$CMAKE_EXE_LINKER_FLAGS" \
  -DCMAKE_SHARED_LINKER_FLAGS="$CMAKE_SHARED_LINKER_FLAGS" \
  -DCMAKE_MODULE_LINKER_FLAGS="$CMAKE_SHARED_LINKER_FLAGS" \
  \
  -DLLVM_ENABLE_PROJECTS="clang" \
  -DLLVM_ENABLE_RUNTIMES="libcxx;libcxxabi;libunwind" \
  -DLLVM_TARGETS_TO_BUILD=Native \
  \
  -DLLVM_ENABLE_PIC=OFF \
  -DLLVM_ENABLE_PER_TARGET_RUNTIME_DIR=ON \
  -DLLVM_ENABLE_MODULES=OFF \
  -DLLVM_ENABLE_BINDINGS=OFF \
  -DLLVM_ENABLE_LIBXML2=OFF \
  -DLLVM_ENABLE_TERMINFO=OFF \
  -DLLVM_ENABLE_ZSTD=OFF \
  -DLLVM_INCLUDE_UTILS=OFF \
  -DLLVM_INCLUDE_TESTS=OFF \
  -DLLVM_INCLUDE_GO_TESTS=OFF \
  -DLLVM_INCLUDE_EXAMPLES=OFF \
  -DLLVM_INCLUDE_BENCHMARKS=OFF \
  -DLLVM_ENABLE_OCAMLDOC=OFF \
  -DLLVM_ENABLE_Z3_SOLVER=OFF \
  -DLLVM_INCLUDE_DOCS=OFF \
  -DLLVM_TOOL_LLVM_LTO2_BUILD=OFF \
  -DLLVM_TOOL_LLVM_LTO_BUILD=OFF \
  -DLLVM_TOOL_LTO_BUILD=OFF \
  -DLLVM_TOOL_REMARKS_SHLIB_BUILD=OFF \
  \
  -DCLANG_INCLUDE_DOCS=OFF \
  -DCLANG_ENABLE_OBJC_REWRITER=OFF \
  -DCLANG_ENABLE_ARCMT=OFF \
  -DCLANG_ENABLE_STATIC_ANALYZER=OFF \
  -DCLANG_DEFAULT_CXX_STDLIB=libc++ \
  -DCLANG_DEFAULT_RTLIB=compiler-rt \
  -DCLANG_DEFAULT_UNWINDLIB=libunwind \
  -DCLANG_DEFAULT_LINKER=lld \
  -DCLANG_DEFAULT_OBJCOPY=llvm-objcopy \
  -DCLANG_PLUGIN_SUPPORT=OFF \
  -DCLANG_TOOL_CLANG_IMPORT_TEST_BUILD=OFF \
  -DCLANG_TOOL_CLANG_LINKER_WRAPPER_BUILD=OFF \
  -DCLANG_TOOL_C_INDEX_TEST_BUILD=OFF \
  -DCLANG_TOOL_ARCMT_TEST_BUILD=OFF \
  -DCLANG_TOOL_C_ARCMT_TEST_BUILD=OFF \
  -DCLANG_TOOL_LIBCLANG_BUILD=OFF \
  \
  -DLIBCXX_ENABLE_STATIC=ON \
  -DLIBCXX_ENABLE_SHARED=OFF \
  -DLIBCXX_ENABLE_STATIC_ABI_LIBRARY=ON \
  -DLIBCXX_ENABLE_EXPERIMENTAL_LIBRARY=OFF \
  -DLIBCXX_ENABLE_RTTI=OFF \
  -DLIBCXX_ENABLE_EXCEPTIONS=OFF \
  -DLIBCXX_INCLUDE_TESTS=OFF \
  -DLIBCXX_INCLUDE_BENCHMARKS=OFF \
  -DLIBCXX_LINK_TESTS_WITH_SHARED_LIBCXX=OFF \
  \
  -DLIBCXXABI_ENABLE_SHARED=OFF \
  -DLIBCXXABI_INCLUDE_TESTS=OFF \
  -DLIBCXXABI_ENABLE_STATIC_UNWINDER=ON \
  -DLIBCXXABI_LINK_TESTS_WITH_SHARED_LIBCXXABI=OFF \
  \
  -DLIBUNWIND_ENABLE_SHARED=OFF \
  -DLIBUNWIND_USE_COMPILER_RT=ON \
  -DLIBUNWIND_ENABLE_STATIC=ON \
  \
  "${EXTRA_CMAKE_ARGS[@]}"

ninja runtimes
# ninja check-runtimes # needs LIBCXX_INCLUDE_TESTS
ninja install-runtimes


# ninja cxx cxxabi unwind
# # ninja check-cxx check-cxxabi check-unwind # needs LIBCXX_INCLUDE_TESTS
# ninja install-cxx install-cxxabi install-unwind
