#!/bin/bash
set -e
source "$(dirname "$0")/config.sh"
source "$(dirname "$0")/config-target-env.sh"

# useful documentation
#   https://llvm.org/docs/HowToCrossCompileLLVM.html#hacks
#   https://libcxx.llvm.org/BuildingLibcxx.html

C_AND_CXX_FLAGS=(
  -I"$ZLIB_DIST/include" \
)

LLVM_CFLAGS=( "${C_AND_CXX_FLAGS[@]}" )
LLVM_CXXFLAGS=( "${C_AND_CXX_FLAGS[@]}" \
  "-I$LLVM_HOST/include/$TARGET/c++/v1" \
)
LLVM_LDFLAGS=( \
  -L"$ZLIB_DIST/lib" \
  "-L$LLVM_HOST/lib/$TARGET" \
)

echo LLVM_CFLAGS=${LLVM_CFLAGS[@]}
echo LLVM_CXXFLAGS=${LLVM_CXXFLAGS[@]}
echo LLVM_LDFLAGS=${LLVM_LDFLAGS[@]}


mkdir -p "$BUILD_DIR/llvm-runtimes-build"
_pushd "$BUILD_DIR/llvm-runtimes-build"

LLVM_RUNTIME_TARGETS=$TARGET
EXTRA_CMAKE_ARGS=()  # extra args added to cmake invocation (depending on target)
case "$TARGET_SYS" in
  macos|ios)
    LLVM_RUNTIME_TARGETS=$TARGET_ARCH-apple-darwin
    EXTRA_CMAKE_ARGS+=( -DRUNTIMES_BUILD_ALLOW_DARWIN=ON )
    ;;
esac

cmake -G Ninja -Wno-dev "$LLVM_SRC/llvm" \
  -DCMAKE_BUILD_TYPE=MinSizeRel \
  -DCMAKE_SYSTEM_NAME="$TARGET_CMAKE_SYSTEM_NAME" \
  -DCMAKE_INSTALL_PREFIX="$LLVM_DIST" \
  -DCMAKE_PREFIX_PATH="$LLVM_DIST" \
  \
  -DLLVM_ENABLE_PROJECTS="clang" \
  -DLLVM_ENABLE_RUNTIMES="libcxx;libcxxabi;libunwind" \
  -DLLVM_RUNTIME_TARGETS="$LLVM_RUNTIME_TARGETS" \
  -DLLVM_TARGETS_TO_BUILD=Native \
  -DLLVM_ENABLE_PIC=False \
  -DLLVM_ENABLE_PER_TARGET_RUNTIME_DIR=ON \
  -DLLVM_ENABLE_MODULES=OFF \
  -DLLVM_ENABLE_BINDINGS=OFF \
  -DLLVM_ENABLE_LIBXML2=OFF \
  -DLLVM_ENABLE_TERMINFO=OFF \
  -DLLVM_INCLUDE_UTILS=OFF \
  -DLLVM_INCLUDE_TESTS=OFF \
  -DLLVM_INCLUDE_GO_TESTS=OFF \
  -DLLVM_INCLUDE_EXAMPLES=OFF \
  -DLLVM_INCLUDE_BENCHMARKS=OFF \
  \
  -DLIBCXX_ENABLE_STATIC=ON \
  -DLIBCXX_ENABLE_SHARED=OFF \
  -DLIBCXX_ENABLE_STATIC_ABI_LIBRARY=ON \
  -DLIBCXX_ENABLE_EXPERIMENTAL_LIBRARY=OFF \
  -DLIBCXX_ENABLE_RTTI=OFF \
  -DLIBCXX_ENABLE_EXCEPTIONS=OFF \
  -DLIBCXX_INCLUDE_TESTS=OFF \
  -DLIBCXX_INCLUDE_BENCHMARKS=OFF \
  -DLIBCXX_LINK_TESTS_WITH_SHARED_LIBCXX=OFF \
  \
  -DLIBCXXABI_ENABLE_SHARED=OFF \
  -DLIBCXXABI_INCLUDE_TESTS=OFF \
  -DLIBCXXABI_ENABLE_STATIC_UNWINDER=ON \
  -DLIBCXXABI_LINK_TESTS_WITH_SHARED_LIBCXXABI=OFF \
  -DLIBUNWIND_ENABLE_SHARED=OFF \
  "${EXTRA_CMAKE_ARGS[@]}"

ninja runtimes
# ninja check-runtimes # needs LIBCXX_INCLUDE_TESTS
ninja install-runtimes

exit


cmake -G Ninja -Wno-dev "$LLVM_SRC/llvm" \
  -DCMAKE_BUILD_TYPE=MinSizeRel \
  -DCMAKE_SYSTEM_NAME="$TARGET_CMAKE_SYSTEM_NAME" \
  -DCMAKE_INSTALL_PREFIX="$LLVM_DIST" \
  -DCMAKE_PREFIX_PATH="$LLVM_DIST" \
  \
  -DCMAKE_C_COMPILER="$TARGET_CC;-target;$TARGET" \
  -DCMAKE_CXX_COMPILER="$TARGET_CXX;-target;$TARGET" \
  -DCMAKE_ASM_COMPILER="$TARGET_ASM;-target;$TARGET" \
  -DCMAKE_RC_COMPILER="$TARGET_RC" \
  -DCMAKE_AR="$TARGET_AR" \
  -DCMAKE_RANLIB="$TARGET_RANLIB" \
  \
  -DLLVM_ENABLE_PROJECTS="clang" \
  -DLLVM_ENABLE_RUNTIMES="libcxx;libcxxabi;libunwind" \
  -DLLVM_RUNTIME_TARGETS="$LLVM_RUNTIME_TARGETS" \
  -DLLVM_TARGETS_TO_BUILD=Native \
  -DLLVM_ENABLE_PIC=False \
  -DLLVM_ENABLE_PER_TARGET_RUNTIME_DIR=ON \
  \
  -DENABLE_SHARED=OFF \
  \
  -DLIBCXX_ENABLE_STATIC=ON \
  -DLIBCXX_ENABLE_SHARED=OFF \
  -DLIBCXX_ENABLE_STATIC_ABI_LIBRARY=ON \
  -DLIBCXX_ENABLE_EXPERIMENTAL_LIBRARY=OFF \
  -DLIBCXX_ENABLE_RTTI=OFF \
  -DLIBCXX_ENABLE_EXCEPTIONS=OFF \
  -DLIBCXX_INCLUDE_TESTS=OFF \
  -DLIBCXX_INCLUDE_BENCHMARKS=OFF \
  -DLIBCXX_LINK_TESTS_WITH_SHARED_LIBCXX=OFF \
  \
  -DLIBCXXABI_ENABLE_SHARED=OFF \
  -DLIBCXXABI_INCLUDE_TESTS=OFF \
  -DLIBCXXABI_ENABLE_STATIC_UNWINDER=ON \
  -DLIBCXXABI_LINK_TESTS_WITH_SHARED_LIBCXXABI=OFF \
  -DLIBUNWIND_ENABLE_SHARED=OFF \

ninja cxx cxxabi unwind
# ninja check-cxx check-cxxabi check-unwind # needs LIBCXX_INCLUDE_TESTS
ninja install-cxx install-cxxabi install-unwind
