Notes on LTO


libc++ built WITHOUT ThinLTO, compiling without -flto=thin

  time out/llvmbox-15.0.7-x86_64-linux/bin/clang++ -O2 -Wl,-s -flto=thin -static \
    test/hello.cc -o out/hello
  real 0m0.614s, user 0m0.558s, sys 0m0.077s
  l out/hello | cut -d' ' -f5
  758K

libc++ built with ThinLTO, compiling with -flto=thin

  time out/llvmbox-15.0.7-x86_64-linux/bin/clang++ -O2 -Wl,-s -flto=thin -static \
    test/hello.cc -o out/hello
  real 0m4.253s, user 0m7.680s, sys 0m10.432s
  l out/hello | cut -d' ' -f5
  485K

libc++ built with ThinLTO, compiling WITHOUT -flto=thin

  time out/llvmbox-15.0.7-x86_64-linux/bin/clang++ -O2 -Wl,-s -static \
    test/hello.cc -o out/hello
  real 0m4.161s, user 0m7.410s, sys 0m9.677s
  l out/hello | cut -d' ' -f5
  486K

using ThinLTO cache, it is much faster:

  rm -rf out/ltocache && mkdir out/ltocache
  time out/llvmbox-15.0.7-x86_64-linux/bin/clang++ -O2 -flto=thin \
    -Wl,--thinlto-cache-dir=out/ltocache -static test/hello.cc -o out/hello
  real 0m4.253s  <-- first run; no cache

  time out/llvmbox-15.0.7-x86_64-linux/bin/clang++ -O2 -flto=thin \
    -Wl,--thinlto-cache-dir=out/ltocache -static test/hello.cc -o out/hello
  real 0m0.700s  <-- cache used


To quickly rebuild & test libc++ with or without ThinLTO, here's a shortcut:

  1. edit 031-llvm-runtimes.sh and remove/add the -flto=thin flags
  2. rebuild libc++ and copy into sysroot:
       rm -rf ~/tmp/llvm-runtimes/ && bash 031-llvm-runtimes.sh &&
       cp out/libcxx-stage2/lib/lib*.a \
         out/llvmbox-15.0.7-x86_64-linux/sysroot/x86_64-linux/lib/
