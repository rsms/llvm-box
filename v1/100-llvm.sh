#!/bin/bash
set -e ; source "$(dirname "$0")/config.sh"

# based on https://git.alpinelinux.org/aports/tree/main/llvm15/APKBUILD

CMAKE_C_FLAGS=()
CMAKE_CXX_FLAGS=()
CMAKE_C_AND_CXX_FLAGS=()
CMAKE_STATIC_LINKER_FLAGS=() # passed to ar, not ld
CMAKE_EXE_LINKER_FLAGS=()
CMAKE_SHARED_LINKER_FLAGS=()
COMMON_LDFLAGS=() # extra for CMAKE_{EXE,SHARED}_LINKER_FLAGS

# zlib
CMAKE_C_FLAGS+=( -I"$ZLIB_DIST/include" )
CMAKE_CXX_FLAGS+=( -I"$ZLIB_DIST/include" )
COMMON_LDFLAGS+=( -L"$ZLIB_DIST/lib" )
EXTRA_CMAKE_ARGS+=( # note: LLVM_ENABLE_ZLIB must be "1", not "ON"
  -DLLVM_ENABLE_ZLIB=1 \
  -DZLIB_LIBRARY="$ZLIB_DIST/lib/libz.a" \
  -DZLIB_INCLUDE_DIR="$ZLIB_DIST/include" \
)

# musl
# CMAKE_C_AND_CXX_FLAGS+=(
#   -nostdinc \
#   -nostdlib \
#   -isystem $MUSL_HOST/include \
#   -I$LINUX_HEADERS_DESTDIR/include \
# )
# COMMON_LDFLAGS+=(
#   -static \
#   -nostdlib \
#   -nodefaultlibs \
#   -nostartfiles \
#   -L$MUSL_HOST/lib -lc -lm \
# )
# CMAKE_EXE_LINKER_FLAGS+=( \
#   $MUSL_HOST/lib/crt1.o \
# )


# bake flags
CMAKE_C_FLAGS="${CMAKE_C_AND_CXX_FLAGS} ${CMAKE_C_FLAGS[@]}"
CMAKE_CXX_FLAGS="${CMAKE_C_AND_CXX_FLAGS} ${CMAKE_CXX_FLAGS[@]}"
CMAKE_STATIC_LINKER_FLAGS="${CMAKE_STATIC_LINKER_FLAGS[@]}" # ar, not ld
CMAKE_EXE_LINKER_FLAGS="${CMAKE_EXE_LINKER_FLAGS[@]} ${COMMON_LDFLAGS[@]}"
CMAKE_SHARED_LINKER_FLAGS="${COMMON_LDFLAGS[@]} ${CMAKE_SHARED_LINKER_FLAGS[@]}"


DESTDIR=$BUILD_DIR/x-llvm
mkdir -p "$BUILD_DIR/x-llvm-build"
# _pushd "$BUILD_DIR/x-llvm-build"

# -DCMAKE_TOOLCHAIN_FILE=$PROJECT/100-toolchain.cmake

cmake -G Ninja -Wno-dev -B "$BUILD_DIR/x-llvm-build" -S "$LLVM_SRC/llvm" \
  -DCMAKE_BUILD_TYPE=Release \
  -DCMAKE_INSTALL_PREFIX="$DESTDIR" \
  -DCMAKE_INSTALL_RPATH="$DESTDIR" \
  \
  -DCMAKE_C_COMPILER="$GCC_MUSL/bin/gcc" \
  -DCMAKE_CXX_COMPILER="$GCC_MUSL/bin/g++" \
  -DCMAKE_ASM_COMPILER="$GCC_MUSL/bin/gcc" \
  -DCMAKE_AR="$GCC_MUSL/bin/ar" \
  -DCMAKE_RANLIB="$GCC_MUSL/bin/ranlib" \
  \
  -DCMAKE_C_FLAGS="$CMAKE_C_FLAGS" \
  -DCMAKE_CXX_FLAGS="$CMAKE_CXX_FLAGS" \
  -DCMAKE_STATIC_LINKER_FLAGS="$CMAKE_STATIC_LINKER_FLAGS" \
  -DCMAKE_EXE_LINKER_FLAGS="$CMAKE_EXE_LINKER_FLAGS" \
  -DCMAKE_SHARED_LINKER_FLAGS="$CMAKE_SHARED_LINKER_FLAGS" \
  -DCMAKE_MODULE_LINKER_FLAGS="$CMAKE_SHARED_LINKER_FLAGS" \
  \
  -DLLVM_DEFAULT_TARGET_TRIPLE="$TARGET_ARCH-linux-gnu" \
  -DLLVM_HOST_TRIPLE="$HOST_ARCH" \
  -DCMAKE_CROSSCOMPILING=ON \
  -DLLVM_TABLEGEN=$LLVM_HOST/bin/llvm-tblgen \
  \
  -DLLVM_APPEND_VC_REV=OFF \
  -DLLVM_BINUTILS_INCDIR=/usr/include \
  -DLLVM_BUILD_DOCS=OFF \
  -DLLVM_BUILD_EXAMPLES=OFF \
  -DLLVM_BUILD_EXTERNAL_COMPILER_RT=ON \
  -DLLVM_BUILD_LLVM_DYLIB=ON \
  -DLLVM_BUILD_TESTS=OFF \
  -DLLVM_ENABLE_ASSERTIONS=OFF \
  -DLLVM_ENABLE_EH=OFF \
  -DLLVM_ENABLE_RTTI=OFF \
  -DLLVM_ENABLE_FFI=OFF \
  -DLLVM_ENABLE_LIBCXX=OFF \
  -DLLVM_ENABLE_PIC=ON \
  -DLLVM_ENABLE_SPHINX=OFF \
  -DLLVM_ENABLE_TERMINFO=OFF \
  -DLLVM_ENABLE_ZLIB=ON \
  -DLLVM_ENABLE_ZSTD=OFF \
  -DLLVM_INCLUDE_BENCHMARKS=OFF \
  -DLLVM_INCLUDE_EXAMPLES=OFF \
  -DLLVM_INSTALL_UTILS=ON \
  -DLLVM_LINK_LLVM_DYLIB=ON \
  \
  -DCLANG_INCLUDE_DOCS=OFF \
  -DCLANG_ENABLE_OBJC_REWRITER=OFF \
  -DCLANG_ENABLE_ARCMT=OFF \
  -DCLANG_ENABLE_STATIC_ANALYZER=OFF \
  -DCLANG_DEFAULT_CXX_STDLIB=libc++ \
  -DCLANG_DEFAULT_RTLIB=compiler-rt \
  -DCLANG_DEFAULT_UNWINDLIB=libunwind \
  -DCLANG_DEFAULT_LINKER=lld \
  -DCLANG_DEFAULT_OBJCOPY=llvm-objcopy \
  -DCLANG_PLUGIN_SUPPORT=OFF \
  \
  "${EXTRA_CMAKE_ARGS[@]}"

cmake --build "$BUILD_DIR/x-llvm-build"

# python3 "$LLVM_SRC"/llvm/utils/lit/setup.py build
